
#define XNE_IMPLEMENTATION
#include "xne.h"

#include <iostream>

#include <cglm/cglm.h>

int main(int argc, char** argv){

    xne_Device device = xne_Device(1920, 1080, "Window", XNE_WINDOW_DECORATED & XNE_WINDOW_VISIBLE);

    xne_GraphicDeviceDesc_t gdesc = {};
    gdesc.device = &device;
    gdesc.clearColor[0] = 0.0f;
    gdesc.clearColor[1] = 0.0f;
    gdesc.clearColor[2] = 0.0f;
    gdesc.bufferWidth = 1920 / 2;
    gdesc.bufferHeight = 1080 / 2;
    xne_GraphicDevice gdevice = xne_GraphicDevice(gdesc);
    
    /*xne_UiDevice_Desc_t uidesc {};
    uidesc.device = &device;
    uidesc.maxVertices = 1024;
    uidesc.maxIndices = 1024;
    xne_UiDevice ui = xne_UiDevice(uidesc);
    ui.CreateBuffers();*/

    xne_Shader shader = xne_Shader(2);
    shader.Load("assets/shader.glsl");

    /*FILE* f = fopen("assets/cube.json", "rb");

    xne_Model mdl = xne_Model(f);
    
    fclose(f);*/


    const float w = 0.5f;
    const float h = 0.5f;

    float vertices[] = {
            -1.0,
            -1.0,
            1.0,
            0.625,
            0.0,
            -1.0,
            0.0,
            0.0,
            -1.0,
            1.0,
            -1.0,
            0.375,
            0.25,
            -1.0,
            0.0,
            0.0,
            -1.0,
            -1.0,
            -1.0,
            0.375,
            0.0,
            -1.0,
            0.0,
            0.0,
            -1.0,
            1.0,
            1.0,
            0.625,
            0.25,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            -1.0,
            0.375,
            0.5,
            0.0,
            1.0,
            0.0,
            -1.0,
            1.0,
            -1.0,
            0.375,
            0.25,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            0.625,
            0.5,
            1.0,
            0.0,
            0.0,
            1.0,
            -1.0,
            -1.0,
            0.375,
            0.75,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            -1.0,
            0.375,
            0.5,
            1.0,
            0.0,
            0.0,
            1.0,
            -1.0,
            1.0,
            0.625,
            0.75,
            0.0,
            -1.0,
            0.0,
            -1.0,
            -1.0,
            -1.0,
            0.375,
            1.0,
            0.0,
            -1.0,
            0.0,
            1.0,
            -1.0,
            -1.0,
            0.375,
            0.75,
            0.0,
            -1.0,
            0.0,
            1.0,
            1.0,
            -1.0,
            0.375,
            0.5,
            0.0,
            0.0,
            -1.0,
            -1.0,
            -1.0,
            -1.0,
            0.125,
            0.75,
            0.0,
            0.0,
            -1.0,
            -1.0,
            1.0,
            -1.0,
            0.125,
            0.5,
            0.0,
            0.0,
            -1.0,
            -1.0,
            1.0,
            1.0,
            0.875,
            0.5,
            0.0,
            0.0,
            1.0,
            1.0,
            -1.0,
            1.0,
            0.625,
            0.75,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.625,
            0.5,
            0.0,
            0.0,
            1.0,
            -1.0,
            -1.0,
            1.0,
            0.625,
            0.0,
            -1.0,
            0.0,
            0.0,
            -1.0,
            1.0,
            1.0,
            0.625,
            0.25,
            -1.0,
            0.0,
            0.0,
            -1.0,
            1.0,
            -1.0,
            0.375,
            0.25,
            -1.0,
            0.0,
            0.0,
            -1.0,
            1.0,
            1.0,
            0.625,
            0.25,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            0.625,
            0.5,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            -1.0,
            0.375,
            0.5,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            0.625,
            0.5,
            1.0,
            0.0,
            0.0,
            1.0,
            -1.0,
            1.0,
            0.625,
            0.75,
            1.0,
            0.0,
            0.0,
            1.0,
            -1.0,
            -1.0,
            0.375,
            0.75,
            1.0,
            0.0,
            0.0,
            1.0,
            -1.0,
            1.0,
            0.625,
            0.75,
            0.0,
            -1.0,
            0.0,
            -1.0,
            -1.0,
            1.0,
            0.625,
            1.0,
            0.0,
            -1.0,
            0.0,
            -1.0,
            -1.0,
            -1.0,
            0.375,
            1.0,
            0.0,
            -1.0,
            0.0,
            1.0,
            1.0,
            -1.0,
            0.375,
            0.5,
            0.0,
            0.0,
            -1.0,
            1.0,
            -1.0,
            -1.0,
            0.375,
            0.75,
            0.0,
            0.0,
            -1.0,
            -1.0,
            -1.0,
            -1.0,
            0.125,
            0.75,
            0.0,
            0.0,
            -1.0,
            -1.0,
            1.0,
            1.0,
            0.875,
            0.5,
            0.0,
            0.0,
            1.0,
            -1.0,
            -1.0,
            1.0,
            0.875,
            0.75,
            0.0,
            0.0,
            1.0,
            1.0,
            -1.0,
            1.0,
            0.625,
            0.75,
            0.0,
            0.0,
            1.0
    };

    uint32_t indices[] = {0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35};

    const xne_VertexAlignDesc_t valign[] = {
        { XNE_VERTEX_POSITION, XNE_FLOAT, offsetof(xne_Vertex_t, position) },
        { XNE_VERTEX_TEXCOORD, XNE_FLOAT, offsetof(xne_Vertex_t, uv) },
        { XNE_VERTEX_NORMAL, XNE_FLOAT, offsetof(xne_Vertex_t, normal)},
        { XNE_VERTEX_ALIGN_END(32) }
    };
    
    xne_MeshDesc_t mdesc = {};
    mdesc.vertices = vertices;
    mdesc.vertexAlign = valign;
    mdesc.indices = indices;
    mdesc.vcount = 36;
    mdesc.icount = 36;
    mdesc.primitive = XNE_MESH_PRIMITIVE_TRIANGLE;

    xne_Mesh mesh = xne_Mesh();
    mesh.CreateFromDesc(mdesc);
    
    /*xne_Texture tex = xne_Texture(XNE_TEXTURE_FILTER_NEAREST, XNE_TEXTURE_WRAP_REPEAT);
    tex.LoadFromPath("assets/texture.bmp");
    tex.Link("texture0", shader.GetProgramId());*/

    mat4 projection;
    glm_perspective(90.0f, device.GetWidth() / device.GetHeight(), 0.0f, 100.0f, projection);

    float scale[3] = {0.1f, 0.1f, 0.1f};
    float position[3] = {0.0f, 0.0f, -2.0f};
    float xangle[3] = {1.0f, 0.0f, 0.0f};
    mat4 transform;
    glm_mat4_identity(transform);

    glm_scale(transform, scale);
    glm_translate(transform, position);
    glm_rotate(transform, 45.0f, xangle);

    while (!xne_IsDone())
    {
        device.PollEvents();

        if(xne_KeyDown(XNE_KEY_ESCAPE)) xne_Done();

        gdevice.NewFrame();

        shader.Enable();
        shader.UniformMat4("projection", &projection[0][0]);
        shader.UniformMat4("transform", &transform[0][0]);
        mesh.Draw();
        shader.Disable();
        

        /*shader.Enable();
        tex.Enable(XNE_TEXTURE_UNIT0);

        mesh.Draw();

        tex.Disable();
        shader.Disable();

        ui.NewFrame();

        // ui drawing
        if(nk_begin((nk_context*)ui.GetHandle(), "Show", nk_rect(50, 50, 150, 150), NK_WINDOW_BORDER|NK_WINDOW_MOVABLE)){
            nk_layout_row_static((nk_context*)ui.GetHandle(), 30, 80, 1);
            if(nk_button_label((nk_context*)ui.GetHandle(), "Hello!")){
                fprintf(stdout, "Hello!");
            }
        }
        nk_end((nk_context*)ui.GetHandle());

        ui.Draw();*/

        gdevice.BlitBuffer();
        device.SwapBuffers();
    }

    return 1;
}



#define XNE_IMPLEMENTATION
#include "xne.h"

#include <iostream>

#include <cglm/cglm.h>

struct xne_Game {
    xne_Shader_t shader;
    xne_Mesh_t mesh;
    xne_Camera_t camera;
} _game;

int main(int argc, char** argv){
    xne_Device window;
    xne_CreateDevice(&window, 1920, 1080, "XNEngine", XNE_WINDOW_DEFAULT);

    xne_GraphicDeviceDesc_t gdesc = {};
    gdesc.device = &window;
    gdesc.clearColor[0] = 0.0f;
    gdesc.clearColor[1] = 0.0f;
    gdesc.clearColor[2] = 0.0f;
    gdesc.bufferWidth = window.framebufferSize[0];
    gdesc.bufferHeight = window.framebufferSize[1];

    xne_GraphicDevice graphics;
    xne_CreateGraphicDevice(&graphics, gdesc);

    xne_UserDeviceDesc_t uidesc;
    uidesc.device = &window;
    uidesc.graphics = &graphics;
    uidesc.bufsize = 512 * 1024;
    uidesc.AA = XNE_ANTI_ALIASING_DISABLE;

    xne_UserDevice_t ui;
    xne_CreateUserDevice(&ui, uidesc);

    const xne_ShaderUniformDesc_t shaderu[] = {
        {XNE_UNIFORM_ATTRIB_UNIFORM, XNE_UNIFORM_MAT4, "projection"},
        {XNE_UNIFORM_ATTRIB_UNIFORM, XNE_UNIFORM_MAT4, "transform"},
        {XNE_SHADER_UNIFORM_END()}
    };

    xne_Shader_t shader;
    xne_CreateShaderf(&shader, "assets/shader.glsl", 2);
    xne_LinkUniforms(&shader, shaderu);

    xne_Model_t model;
    xne_CreateModelf(&model, "assets/duck.cjson");

    xne_Camera_Desc_t camdesc = {};
    camdesc.projection = XNE_CAMERA_PERSPECTIVE;
    camdesc.width = &gdesc.bufferWidth;
    camdesc.height = &gdesc.bufferHeight;
    camdesc.fov = 90.0f;
    camdesc.near = 0.0f;
    camdesc.far = 100.0f;
    xne_Camera_t camera;
    xne_CreateCamera(&camera, camdesc);
    xne_CameraRotateTo(&camera, 0, -90.0f, 0.0f);

    float scale[3] = {0.01f, 0.01f, 0.01f};
    float position[3] = {0.0f, -50.0f, -300.0f};

    mat4 transform;
    glm_mat4_identity(transform);
    glm_scale(transform, scale);
    glm_translate(transform, position);

    while (!xne_IsDone())
    {
        xne_PollEvents(&window);
        xne_SkipIfNotFocus();

        if(xne_KeyDown(XNE_KEY_ESCAPE)) xne_Done();
        
        xne_NewFrame(&graphics);

        xne_ShaderEnable(&shader);
        xne_UseUniform(&shader, 0, (void*)xne_CameraGetProjection(&camera));
        xne_UseUniform(&shader, 1, (void*)transform);

        xne_DrawModel(&model);

        xne_ShaderDisable(NULL);


        xne_UserDeviceNewFrame(&ui);
        if(nk_begin(ui.ctx, "Show", nk_rect(0, 0, 250, 250), NK_WINDOW_BORDER|NK_WINDOW_MOVABLE|NK_WINDOW_SCALABLE|NK_WINDOW_MINIMIZABLE|NK_WINDOW_TITLE)){
            nk_layout_row_static(ui.ctx, 30, 80, 1);
            nk_button_label(ui.ctx, "Hllo!");
        }
        nk_end(ui.ctx);
        xne_UserDeviceDraw(&ui);
        xne_BlitBuffers(&graphics);

        xne_SwapBuffers(&window);
    }

    xne_DestroyModel(&model);
    xne_DestroyShader(&shader);
    xne_DestroyUserDevice(&ui);
    xne_DestroyGraphicDevice(&graphics);
    xne_DestroyDevice(&window);

    return 1;
}




















#define XNE_IMPLEMENTATION
#define XNE_INLUDE_MESH_GEN
#include "xne.h"

#include <iostream>

#define XNE_CORE_STRING
#include "core/core.h"

#include <cglm/cglm.h>
#include <nuklear.h>

#define FPS_CAP 60
#define MS_PER_SEC 0.0033

static struct xne_Game {
    xne_Shader_t shader;
    xne_Model_t model;
    xne_Camera_t camera;
    xne_Texture_t texture;

    xne_Mesh_t plane;
    xne_TextureAtlas_t atlas;
} gstate;

int main(int argc, char** argv){
    xne_Device window;
    xne_create_device(&window, 1920, 1080, "XNEngine", XNE_WINDOW_DEFAULT);

    xne_GraphicDeviceDesc_t gdesc = {};
    gdesc.device = &window;
    gdesc.clearColor[0] = 0.0f;
    gdesc.clearColor[1] = 0.0f;
    gdesc.clearColor[2] = 0.0f;
    gdesc.bufferWidth = window.framebufferSize[0];
    gdesc.bufferHeight = window.framebufferSize[1];

    xne_GraphicDevice graphics;
    xne_create_graphic_device(&graphics, gdesc);

    xne_UserDeviceDesc_t uidesc;
    uidesc.device = &window;
    uidesc.graphics = &graphics;
    uidesc.bufsize = 512 * 1024;
    uidesc.AA = XNE_ANTI_ALIASING_ENABLE;

    xne_UserDevice_t ui;
    xne_create_user_device(&ui, uidesc);

    const xne_ShaderUniformDesc_t shaderu[] = {
        {XNE_UNIFORM_ATTRIB_UNIFORM, XNE_UNIFORM_MAT4, "projection"},
        {XNE_UNIFORM_ATTRIB_UNIFORM, XNE_UNIFORM_MAT4, "transform"},
        {XNE_SHADER_UNIFORM_END()}
    };

    xne_create_shader(&gstate.shader, "assets/shader.glsl", 2);
    xne_shader_link_uniforms(&gstate.shader, shaderu);

    xne_create_model(&gstate.model, "assets/duck.cjson");
    //xne_create_texture(&gstate.texture, "assets/atlas.png", XNE_TEXTURE_FILTER_LINEAR, XNE_TEXTURE_WRAP_REPEAT);
    //xne_link_texture(&gstate.texture, "texture0", gstate.shader.target);

    xne_create_texture_atlas(&gstate.atlas, "assets/atlas.png", 4, 4, XNE_TEXTURE_FILTER_LINEAR, XNE_TEXTURE_WRAP_REPEAT);
    xne_link_texture_atlas(&gstate.atlas, "texture0", gstate.shader.target);
    xne_link_texture_atlas_layer(&gstate.atlas, "layer", gstate.shader.target);

    xne_create_plane(&gstate.plane, 200, 200);

    xne_Camera_Desc_t camdesc = {};
    camdesc.projection = XNE_CAMERA_PERSPECTIVE;
    camdesc.width = &gdesc.bufferWidth;
    camdesc.height = &gdesc.bufferHeight;
    camdesc.fov = 90.0f;
    camdesc.near = 0.0f;
    camdesc.far = 100.0f;
    xne_create_camera(&gstate.camera, camdesc);
    xne_camera_rotateto(&gstate.camera, 0.0f, -90.0f, 0.0f);

    float scale[3] = {0.01f, 0.01f, 0.01f};
    float position[3] = {0.0f, -50.0f, -300.0f};

    mat4 transform;
    glm_mat4_identity(transform);
    glm_scale(transform, scale);
    glm_translate(transform, position);

    double prev = xne_get_time();
    double current = 0.0, lag = 0.0; 

    while (!xne_is_done())
    {
        /* code */
        current = xne_get_time();
        double delta = current - prev;
        prev = current;

        lag += delta;

        xne_poll_events(&window);
        xne_SkipIfNotFocus();

        if(xne_key_down(XNE_KEY_ESCAPE)) xne_done();

        while (lag > MS_PER_SEC)
        {
            /* udpate */

            lag -= MS_PER_SEC;
        }
        
        /* rendering */
        xne_new_frame(&graphics);

        xne_shader_enable(&gstate.shader);
        xne_texture_atlas_enable(&gstate.atlas, XNE_TEXTURE_UNIT0, 2, 1);
        //xne_texture_enable(&gstate.texture, XNE_TEXTURE_UNIT0);
        xne_shader_use_uniform(&gstate.shader, 0, (void*)xne_get_camera_projection(&gstate.camera));
        xne_shader_use_uniform(&gstate.shader, 1, (void*)transform);
        xne_draw_mesh(&gstate.plane);
        //xne_texture_disable(NULL);
        xne_texture_atlas_disable(NULL);
        xne_shader_disable(NULL);

        xne_user_device_new_frame(&ui);
        if(nk_begin(ui.ctx, "Stats", nk_rect(0, 0, 250, 250), NK_WINDOW_BORDER|NK_WINDOW_MOVABLE|NK_WINDOW_SCALABLE|NK_WINDOW_MINIMIZABLE|NK_WINDOW_TITLE)){
            nk_layout_row_static(ui.ctx, 30, 80, 1);
            nk_button_label(ui.ctx, "Hllo!");
        }
        nk_end(ui.ctx);

        xne_user_device_draw(&ui);

        xne_blit_buffers(&graphics);
        xne_swap_buffers(&window);
    }
    
    xne_destroy_model(&gstate.model);
    xne_destroy_shader(&gstate.shader);
    xne_destroy_user_device(&ui);
    xne_destroy_graphic_device(&graphics);
    xne_destroy_device(&window);

    return 1;
}